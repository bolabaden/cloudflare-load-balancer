# Frontend Test Failures - Fix and Enhancement PRD

## Project Overview
Fix failing frontend tests in the Cloudflare Load Balancer project. The tests are failing due to mismatches between expected test behavior and actual implementation, incorrect assertion syntax, and missing functionality.

## Problem Statement
The frontend test suite has 16 failing tests out of 49 total tests. The failures fall into several categories:

1. **Test Assertion Syntax Issues**: Tests are using Jest-style assertions (`.toBe()`, `.not.toBeNull()`) instead of Node.js native test assertions
2. **Missing Functions**: Tests expect functions like `generateErrorPage`, `generateLoginPage`, `generateDashboard` to be available globally but they're only defined in the test file
3. **Static File Serving**: Tests expect a static file server with specific methods that don't exist in the current implementation
4. **Mock vs Real Implementation Gap**: Tests use mock implementations that don't match the actual frontend.ts implementation
5. **Error Page Handling**: Error page generation has incorrect conditional logic for details parameter

## Success Criteria
- All 49 frontend tests pass
- Tests use proper Node.js assertion syntax
- Frontend implementation matches test expectations
- Static file serving works as expected by tests
- Error handling works correctly
- Authentication routes function properly
- API routes require proper authentication

## Technical Requirements

### 1. Fix Test Assertion Syntax
- Replace Jest-style assertions with Node.js native assertions
- Fix `.toBe()` → `assert.strictEqual()`
- Fix `.not.toBeNull()` → `assert(value !== null)`
- Fix `.toBeNull()` → `assert.strictEqual(value, null)`

### 2. Implement Missing Frontend Functions
- Create `generateErrorPage(status, message, details)` function
- Create `generateLoginPage(env, error)` function  
- Create `generateDashboard(user, env)` function
- Export these functions from frontend.ts for testing

### 3. Implement Static File Server
- Create a static file server class with:
  - `serveFile(path)` method
  - `getMimeType(path)` method
  - `getFile(path)` method
- Support for CSS, JS, HTML, and other static assets
- Proper MIME type detection
- Cache headers for static assets

### 4. Fix Error Page Logic
- Ensure error pages without details don't include 'error-details' class/content
- Fix conditional rendering of details section

### 5. Implement Request Router
- Create a request router that handles:
  - Static file serving from `/static/` paths
  - Authentication routes (`/auth/*`)
  - Dashboard routes (`/`, `/dashboard`)
  - API routes (`/api/*`)
  - 404 handling for unknown routes

### 6. Authentication Integration
- Ensure authentication routes work properly
- Implement proper redirects for unauthenticated users
- Handle OAuth flows for GitHub and Google
- Implement logout functionality

### 7. API Route Protection
- Ensure API routes require authentication
- Return proper 401 responses for unauthenticated requests
- Serve mock data for authenticated requests

## Implementation Notes
- Follow the memory rule: Never embed HTML, CSS, or JavaScript code directly in Cloudflare Worker TypeScript files
- Use separate static files and template systems
- Maintain compatibility with existing ASSETS binding approach
- Ensure tests can run in Node.js environment with proper mocking

## Testing Strategy
- Run `npm run test:frontend` to verify fixes
- Ensure all 49 tests pass
- Maintain existing test structure and expectations
- Use Node.js native test runner and assertions

## Files to Modify
- `src/frontend.ts` - Main frontend implementation
- `test/frontend.test.js` - Fix assertion syntax
- Add any necessary utility files for static serving and routing

## Dependencies
- Node.js native test framework
- Existing Cloudflare Workers environment
- OAuth integration (GitHub, Google)
- JWT authentication system 