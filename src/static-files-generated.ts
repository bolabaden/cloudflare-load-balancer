// Auto-generated static files module
// DO NOT EDIT - This file is generated by build-static.js

import { OAuthUser } from './auth';

// Static file content storage
const staticFiles: Record<string, { content: string; contentType: string }> = {
    '/static/css/login.css': {
        content: `* { 
    margin: 0; 
    padding: 0; 
    box-sizing: border-box; 
}

body { 
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
    background: linear-gradient(135deg, #667EEA 0%, #764BA2 100%);
    color: #333; 
    line-height: 1.6; 
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
}

.login-container {
    background: white;
    border-radius: 12px;
    padding: 40px;
    box-shadow: 0 20px 40px rgba(0,0,0,0.1);
    width: 100%;
    max-width: 400px;
    text-align: center;
}

.logo {
    font-size: 48px;
    margin-bottom: 20px;
}

h1 {
    color: #2D3748;
    margin-bottom: 10px;
    font-size: 24px;
}

.subtitle {
    color: #718096;
    margin-bottom: 30px;
}

.oauth-button {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    padding: 12px 20px;
    margin-bottom: 15px;
    border: 2px solid #E2E8F0;
    border-radius: 8px;
    background: white;
    color: #2D3748;
    text-decoration: none;
    font-weight: 500;
    transition: all 0.2s ease;
}

.oauth-button:hover {
    border-color: #CBD5E0;
    background: #F7FAFC;
    transform: translateY(-1px);
}

.oauth-button img {
    width: 20px;
    height: 20px;
    margin-right: 12px;
}

.github-button {
    background: #24292E;
    color: white;
    border-color: #24292E;
}

.github-button:hover {
    background: #1A1E22;
    border-color: #1A1E22;
    color: white;
}

.google-button {
    border-color: #4285F4;
}

.google-button:hover {
    border-color: #3367D6;
}

.divider {
    margin: 25px 0;
    position: relative;
    text-align: center;
}

.divider::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    height: 1px;
    background: #E2E8F0;
}

.divider span {
    background: white;
    padding: 0 15px;
    color: #718096;
    font-size: 14px;
}

.basic-auth-form {
    text-align: left;
}

.form-group {
    margin-bottom: 15px;
}

label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
    color: #2D3748;
}

input[type="text"], input[type="password"] {
    width: 100%;
    padding: 12px;
    border: 2px solid #E2E8F0;
    border-radius: 6px;
    font-size: 14px;
}

input[type="text"]:focus, input[type="password"]:focus {
    outline: none;
    border-color: #4299E1;
}

.login-button {
    width: 100%;
    padding: 12px;
    background: #4299E1;
    color: white;
    border: none;
    border-radius: 6px;
    font-weight: 500;
    cursor: pointer;
    transition: background 0.2s ease;
}

.login-button:hover {
    background: #3182CE;
}

.error {
    background: #FED7D7;
    color: #C53030;
    padding: 12px;
    border-radius: 6px;
    margin-bottom: 20px;
    font-size: 14px;
}

.info {
    color: #718096;
    font-size: 12px;
    margin-top: 20px;
} `,
        contentType: 'text/css'
    },
    '/static/css/dashboard.css': {
        content: `* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    background: #F8FAFC;
    color: #1A202C;
    line-height: 1.6;
}

.header {
    background: white;
    border-bottom: 1px solid #E2E8F0;
    padding: 1rem 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.header h1 {
    color: #2D3748;
    font-size: 1.5rem;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.header h1 i {
    color: #F56565;
}

.user-info {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.user-details {
    display: flex;
    flex-direction: column;
    font-size: 0.875rem;
}

.user-name {
    font-weight: 600;
    color: #2D3748;
}

.user-email {
    color: #718096;
}

.logout-btn {
    background: #F56565;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    font-size: 0.875rem;
    cursor: pointer;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    transition: background-color 0.2s;
}

.logout-btn:hover {
    background: #E53E3E;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
}

.alert {
    background: #EBF8FF;
    border: 1px solid #90CDF4;
    color: #2B6CB0;
    padding: 1rem;
    border-radius: 8px;
    margin-bottom: 2rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.tabs {
    display: flex;
    background: white;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    margin-bottom: 2rem;
    overflow: hidden;
}

.tab {
    flex: 1;
    padding: 1rem 1.5rem;
    background: none;
    border: none;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s;
    color: #718096;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
}

.tab.active {
    color: #3182CE;
    background: #F7FAFC;
}

.tab.active::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 2px;
    background: #3182CE;
}

.tab:hover:not(.active) {
    background: #F7FAFC;
    color: #4A5568;
}

.tab-content {
    display: none;
}

.tab-content.active {
    display: block;
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
}

.stat-card {
    background: white;
    border-radius: 8px;
    padding: 1.5rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    display: flex;
    align-items: center;
    gap: 1rem;
}

.stat-icon {
    width: 48px;
    height: 48px;
    border-radius: 8px;
    background: #EDF2F7;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    color: #4A5568;
}

.stat-icon.healthy {
    background: #C6F6D5;
    color: #2F855A;
}

.stat-icon.error {
    background: #FED7D7;
    color: #C53030;
}

.stat-content {
    flex: 1;
}

.stat-number {
    font-size: 2rem;
    font-weight: 700;
    color: #2D3748;
    line-height: 1;
}

.stat-label {
    color: #718096;
    font-size: 0.875rem;
    margin-top: 0.25rem;
}

.card {
    background: white;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    margin-bottom: 2rem;
}

.card-header {
    padding: 1.5rem;
    border-bottom: 1px solid #E2E8F0;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.card-header h3 {
    color: #2D3748;
    font-size: 1.125rem;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.card-content {
    padding: 1.5rem;
}

.btn {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 6px;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    transition: all 0.2s;
}

.btn-primary {
    background: #3182CE;
    color: white;
}

.btn-primary:hover {
    background: #2C5282;
}

.btn-secondary {
    background: #718096;
    color: white;
}

.btn-secondary:hover {
    background: #4A5568;
}

.btn-success {
    background: #38A169;
    color: white;
}

.btn-success:hover {
    background: #2F855A;
}

.loading {
    text-align: center;
    color: #718096;
    padding: 2rem;
}

.activity-item {
    display: flex;
    gap: 1rem;
    padding: 0.75rem 0;
    border-bottom: 1px solid #E2E8F0;
}

.activity-item:last-child {
    border-bottom: none;
}

.activity-time {
    color: #718096;
    font-size: 0.875rem;
    min-width: 120px;
}

.activity-message {
    color: #2D3748;
    font-size: 0.875rem;
}

.log-entry {
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    font-size: 0.75rem;
    padding: 0.5rem 0;
    border-bottom: 1px solid #E2E8F0;
}

.log-entry:last-child {
    border-bottom: none;
}

.log-time {
    color: #718096;
    margin-right: 1rem;
}

.log-message {
    color: #2D3748;
}

.service-item,
.backend-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    border: 1px solid #E2E8F0;
    border-radius: 6px;
    margin-bottom: 0.5rem;
    transition: border-color 0.2s, box-shadow 0.2s;
}

.service-item:hover,
.backend-item:hover {
    border-color: #CBD5E0;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.service-item:last-child,
.backend-item:last-child {
    margin-bottom: 0;
}

.service-info,
.backend-info {
    flex: 1;
}

.service-name,
.backend-name {
    font-weight: 600;
    color: #2D3748;
    margin-bottom: 0.25rem;
}

.service-url,
.backend-url {
    color: #718096;
    font-size: 0.875rem;
}

.status-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
}

.status-healthy {
    background: #C6F6D5;
    color: #2F855A;
}

.status-unhealthy {
    background: #FED7D7;
    color: #C53030;
}

.status-unknown {
    background: #E2E8F0;
    color: #4A5568;
}

.service-actions,
.backend-actions {
    display: flex;
    gap: 0.5rem;
    align-items: center;
}

.btn-small {
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    border-radius: 4px;
}

.btn-danger {
    background: #E53E3E;
    color: white;
}

.btn-danger:hover {
    background: #C53030;
}

.empty-state {
    text-align: center;
    padding: 3rem 2rem;
    color: #718096;
}

.empty-state i {
    font-size: 3rem;
    margin-bottom: 1rem;
    color: #CBD5E0;
}

.empty-state h3 {
    margin-bottom: 0.5rem;
    color: #2D3748;
}

.empty-state p {
    margin-bottom: 1.5rem;
}

/* Modal Styles */
.modal {
    display: none !important;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
}

.modal.active {
    display: flex !important;
    align-items: center;
    justify-content: center;
}

.modal-content {
    background: white;
    border-radius: 8px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
    max-width: 500px;
    width: 90%;
    max-height: 90vh;
    overflow-y: auto;
}

.modal-header {
    padding: 1.5rem;
    border-bottom: 1px solid #E2E8F0;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.modal-header h3 {
    margin: 0;
    color: #2D3748;
    font-size: 1.25rem;
    font-weight: 600;
}

.modal-close {
    background: none;
    border: none;
    font-size: 1.5rem;
    color: #718096;
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 4px;
}

.modal-close:hover {
    background: #F7FAFC;
    color: #2D3748;
}

.modal-body {
    padding: 1.5rem;
}

.modal-footer {
    padding: 1.5rem;
    border-top: 1px solid #E2E8F0;
    display: flex;
    gap: 1rem;
    justify-content: flex-end;
}

/* Form Styles */
.form-group {
    margin-bottom: 1.5rem;
}

.form-group label {
    display: block;
    margin-bottom: 0.5rem;
    color: #2D3748;
    font-weight: 500;
    font-size: 0.875rem;
}

.form-group input,
.form-group select,
.form-group textarea {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #E2E8F0;
    border-radius: 6px;
    font-size: 0.875rem;
    transition: border-color 0.2s, box-shadow 0.2s;
}

.form-group input:focus,
.form-group select:focus,
.form-group textarea:focus {
    outline: none;
    border-color: #3182CE;
    box-shadow: 0 0 0 3px rgba(49, 130, 206, 0.1);
}

.form-group textarea {
    min-height: 100px;
    resize: vertical;
}

/* Card Header Improvements */
.card-header>div {
    display: flex;
    gap: 0.5rem;
    align-items: center;
}

@media (max-width: 768px) {
    .header {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
    }

    .tabs {
        flex-direction: column;
    }

    .stats-grid {
        grid-template-columns: 1fr;
    }

    .container {
        padding: 1rem;
    }
}

/* Health Check Grid */
.health-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1rem;
}

.health-service {
    border: 1px solid #E2E8F0;
    border-radius: 6px;
    padding: 1rem;
    background: white;
}

.health-service h4 {
    margin: 0 0 1rem 0;
    color: #2D3748;
    font-size: 1rem;
    font-weight: 600;
}

.health-backends {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.health-backend {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: #F7FAFC;
    border-radius: 4px;
    font-size: 0.875rem;
}

.health-details {
    color: #718096;
    font-size: 0.75rem;
}

.health-error {
    color: #E53E3E;
    font-style: italic;
    padding: 0.75rem;
    background: #FED7D7;
    border-radius: 4px;
    font-size: 0.875rem;
}

/* Log Styles */
.log-entry {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 0.5rem 0;
    border-bottom: 1px solid #F7FAFC;
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    font-size: 0.875rem;
}

.log-entry:last-child {
    border-bottom: none;
}

.log-time {
    color: #718096;
    font-weight: 500;
    min-width: 180px;
}

.log-level {
    padding: 0.125rem 0.5rem;
    border-radius: 3px;
    font-size: 0.75rem;
    font-weight: 600;
    min-width: 50px;
    text-align: center;
}

.log-info {
    background: #BEE3F8;
    color: #2B6CB0;
}

.log-warn {
    background: #FBD38D;
    color: #C05621;
}

.log-error {
    background: #FED7D7;
    color: #C53030;
}

.log-message {
    color: #2D3748;
    flex: 1;
}

/* Status Badge Improvements */
.status-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.025em;
}

.status-healthy {
    background: #C6F6D5;
    color: #22543D;
}

.status-error {
    background: #FED7D7;
    color: #742A2A;
}

.status-warning {
    background: #FBD38D;
    color: #744210;
}

.status-unknown {
    background: #E2E8F0;
    color: #4A5568;
}

/* Alert Styles */
.alert {
    padding: 1rem;
    border-radius: 6px;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 500;
    background: #EBF8FF;
    color: #2B6CB0;
    border: 1px solid #BEE3F8;
}

.alert-success {
    background: #C6F6D5;
    color: #22543D;
    border: 1px solid #9AE6B4;
}

.alert-error {
    background: #FED7D7;
    color: #742A2A;
    border: 1px solid #FCA5A5;
}

.alert i {
    font-size: 1.125rem;
}`,
        contentType: 'text/css'
    },
    '/static/js/dashboard.js': {
        content: `// Dashboard JavaScript functionality
  
// API configuration - API_SECRET will be set by the template, API_BASE from window location
let API_BASE = window.location.origin;

// Tab management
function showTab(tabName) {
  console.log(\`showTab called with: \${tabName}\`);
  
  try {
  // Hide all tab contents
  const tabContents = document.querySelectorAll('.tab-content');
    console.log(\`Found \${tabContents.length} tab contents\`);
  tabContents.forEach(content => content.classList.remove('active'));

  // Remove active class from all tabs
  const tabs = document.querySelectorAll('.tab');
    console.log(\`Found \${tabs.length} tabs\`);
  tabs.forEach(tab => tab.classList.remove('active'));

  // Show selected tab content
  const selectedContent = document.getElementById(\`\${tabName}-tab\`);
  if (selectedContent) {
    selectedContent.classList.add('active');
      console.log(\`Activated content for \${tabName}\`);
    } else {
      console.error(\`Could not find content element: \${tabName}-tab\`);
  }

    // Add active class to selected tab by finding the tab with matching data attribute
    const selectedTab = document.querySelector(\`button[data-tab="\${tabName}"]\`);
    if (selectedTab) {
  selectedTab.classList.add('active');
      console.log(\`Activated tab button for \${tabName}\`);
    } else {
      console.error(\`Could not find tab button for \${tabName}\`);
    }

  // Load data for the selected tab
  loadTabData(tabName);
    
    console.log(\`Successfully switched to \${tabName} tab\`);
  } catch (error) {
    console.error(\`Error in showTab: \${error.message}\`);
  }
}

// Load data based on the active tab
function loadTabData(tabName) {
  switch (tabName) {
    case 'overview':
      loadOverviewData();
      break;
    case 'services':
      loadServicesData();
      break;
    case 'backends':
      loadBackendsData();
      break;
    case 'health':
      loadHealthData();
      break;
    case 'logs':
      loadLogsData();
      break;
  }
}

// API helper function
async function apiCall(endpoint, options = {}) {
  console.log(\`Making API call to: \${API_BASE}\${endpoint}\`);
  console.log('API_SECRET available:', !!API_SECRET);
  
  const defaultOptions = {
    headers: {
      'Authorization': \`Bearer \${API_SECRET}\`,
      'Content-Type': 'application/json',
      ...options.headers
    }
  };

  try {
    const url = \`\${API_BASE}\${endpoint}\`;
    console.log('Full URL:', url);
    console.log('Request options:', defaultOptions);
    
    const response = await fetch(url, {
      ...defaultOptions,
      ...options
    });

    console.log('Response status:', response.status);
    console.log('Response ok:', response.ok);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Error response:', errorText);
      throw new Error(\`HTTP \${response.status}: \${response.statusText} - \${errorText}\`);
    }

    const result = await response.json();
    console.log('API response:', result);
    return result;
  } catch (error) {
    console.error('API call failed:', error);
    throw error;
  }
}

// Load overview data
async function loadOverviewData() {
  console.log('Loading overview data...');
  try {
    // Load services list to get counts
    console.log('Making API call to /admin/services/list');
    const services = await apiCall('/admin/services/list');
    console.log('Services response:', services);

    // Update stats
    document.getElementById('total-services').textContent =
      Object.keys(services.services || {}).length;

    // Load backend data for each service
    let totalBackends = 0;
    let healthyBackends = 0;
    let unhealthyBackends = 0;

    for (const serviceName in services.services) {
      try {
        const config = await apiCall(\`/admin/services/\${serviceName}/config\`);
        if (config.pools) {
          config.pools.forEach(pool => {
            if (pool.backends) {
              totalBackends += pool.backends.length;
              pool.backends.forEach(backend => {
                if (backend.healthy) {
                  healthyBackends++;
                } else {
                  unhealthyBackends++;
                }
              });
            }
          });
        }
      } catch (error) {
        console.warn(\`Failed to load config for \${serviceName}:\`, error);
      }
    }

    document.getElementById('total-backends').textContent = totalBackends;
    document.getElementById('healthy-backends').textContent = healthyBackends;
    document.getElementById('unhealthy-backends').textContent = unhealthyBackends;

    // Load recent activity
    loadRecentActivity();

  } catch (error) {
    console.error('Failed to load overview data:', error);
    showError('Failed to load overview data: ' + error.message);
    
    // Set default values when API fails
    document.getElementById('total-services').textContent = '0';
    document.getElementById('total-backends').textContent = '0';
    document.getElementById('healthy-backends').textContent = '0';
    document.getElementById('unhealthy-backends').textContent = '0';
    
    // Show error in activity log
    document.getElementById('activity-log').innerHTML = \`
      <div class="activity-item">
        <div class="activity-time">[Error]</div>
        <div class="activity-message">Failed to load data: \${error.message}</div>
      </div>
    \`;
  }
}

// Load services data
async function loadServicesData() {
  const container = document.getElementById('services-list');
  container.innerHTML = '<div class="loading">Loading services...</div>';

  try {
    const services = await apiCall('/admin/services/list');
    console.log('Services response:', services);

    if (!services.services || Object.keys(services.services).length === 0) {
      container.innerHTML = \`
        <div class="empty-state">
          <i class="fas fa-server"></i>
          <h3>No services configured</h3>
          <p>Add your first load balancer service to get started.</p>
          <button class="btn btn-success" onclick="openAddServiceModal()">
            <i class="fas fa-plus"></i> Add Service
          </button>
        </div>
      \`;
      return;
    }

    let html = '';
    for (const [serviceName, serviceData] of Object.entries(services.services)) {
      const backendCount = serviceData.backends ? serviceData.backends.length : 0;
      const statusClass = serviceData.status === 'active' ? 'status-healthy' : 'status-unknown';
      
      html += \`
                <div class="service-item">
                    <div class="service-info">
                        <div class="service-name">\${serviceName}</div>
                        <div class="service-url">\${backendCount} backend(s) configured</div>
            <div class="service-url">Mode: \${serviceData.mode || 'simple'}</div>
          </div>
          <div class="service-actions">
            <div class="status-badge \${statusClass}">\${serviceData.status || 'Active'}</div>
            <button class="btn btn-small btn-primary" onclick="viewServiceDetails('\${serviceName}')">
              <i class="fas fa-eye"></i> View
            </button>
            <button class="btn btn-small btn-danger" onclick="deleteService('\${serviceName}')">
              <i class="fas fa-trash"></i> Delete
            </button>
                    </div>
                </div>
            \`;
    }

    container.innerHTML = html;

  } catch (error) {
    console.error('Failed to load services:', error);
    container.innerHTML = \`
      <div class="empty-state">
        <i class="fas fa-exclamation-triangle"></i>
        <h3>Failed to load services</h3>
        <p>Error: \${error.message}</p>
        <button class="btn btn-primary" onclick="loadServicesData()">
          <i class="fas fa-sync-alt"></i> Retry
        </button>
        <button class="btn btn-success" onclick="openAddServiceModal()">
          <i class="fas fa-plus"></i> Add Service
        </button>
      </div>
    \`;
  }
}

// Load backends data
async function loadBackendsData() {
  const container = document.getElementById('backends-list');
  container.innerHTML = '<div class="loading">Loading backends...</div>';

  try {
    const services = await apiCall('/admin/services/list');
    
    if (!services.services || Object.keys(services.services).length === 0) {
      container.innerHTML = \`
        <div class="empty-state">
          <i class="fas fa-network-wired"></i>
          <h3>No backends configured</h3>
          <p>Add services first, then configure their backends.</p>
          <button class="btn btn-success" onclick="openAddServiceModal()">
            <i class="fas fa-plus"></i> Add Service
          </button>
        </div>
      \`;
      return;
    }

    let html = '';
    let totalBackends = 0;
    
    for (const [serviceName, serviceData] of Object.entries(services.services)) {
      if (serviceData.backends && serviceData.backends.length > 0) {
        serviceData.backends.forEach((backend, index) => {
          totalBackends++;
          const statusClass = backend.healthy !== false ? 'status-healthy' : 'status-error';
          const backendId = \`backend-\${index}\`;

                html += \`
                                    <div class="backend-item">
              <div class="service-info">
                <div class="service-name">\${backend}</div>
                <div class="service-url">Service: \${serviceName}</div>
                <div class="service-url">Weight: \${backend.weight || 1}</div>
              </div>
              <div class="backend-actions">
                <div class="status-badge \${statusClass}">
                  \${backend.healthy !== false ? 'Healthy' : 'Unhealthy'}
                </div>
                <button class="btn btn-small btn-danger" onclick="deleteBackend('\${serviceName}', '\${backendId}')">
                  <i class="fas fa-trash"></i> Remove
                </button>
                                        </div>
                                    </div>
                                \`;
              });
      }
    }

    if (totalBackends === 0) {
      container.innerHTML = \`
        <div class="empty-state">
          <i class="fas fa-network-wired"></i>
          <h3>No backends found</h3>
          <p>Your services don't have any backends configured yet.</p>
          <button class="btn btn-success" onclick="openAddBackendModal()">
            <i class="fas fa-plus"></i> Add Backend
          </button>
        </div>
      \`;
    } else {
      container.innerHTML = html;
    }

  } catch (error) {
    console.error('Failed to load backends:', error);
    container.innerHTML = \`
      <div class="empty-state">
        <i class="fas fa-exclamation-triangle"></i>
        <h3>Failed to load backends</h3>
        <p>Error: \${error.message}</p>
        <button class="btn btn-primary" onclick="loadBackendsData()">
          <i class="fas fa-sync-alt"></i> Retry
        </button>
      </div>
    \`;
  }
}

// Load health data
async function loadHealthData() {
  const container = document.getElementById('health-results');
  container.innerHTML = '<div class="loading">Loading health status...</div>';

  try {
    const services = await apiCall('/admin/services/list');
    
    if (!services.services || Object.keys(services.services).length === 0) {
      container.innerHTML = \`
        <div class="empty-state">
          <i class="fas fa-heartbeat"></i>
          <h3>No services to check</h3>
          <p>Add services first to monitor their health.</p>
        </div>
      \`;
      return;
    }

    let html = '<div class="health-grid">';
    
    for (const [serviceName, serviceData] of Object.entries(services.services)) {
      try {
        const health = await apiCall(\`/admin/services/\${serviceName}/health\`);

        html += \`
          <div class="health-service">
            <h4>\${serviceName}</h4>
            <div class="health-backends">
        \`;
        
        if (health.backends && health.backends.length > 0) {
          health.backends.forEach(backend => {
            const statusClass = backend.healthy ? 'status-healthy' : 'status-error';
            html += \`
              <div class="health-backend">
                                    <div class="backend-url">\${backend.url}</div>
                <div class="status-badge \${statusClass}">
                  \${backend.healthy ? 'Healthy' : 'Unhealthy'}
                </div>
                <div class="health-details">
                  Response: \${backend.responseTime || 'N/A'}ms
                                </div>
                            </div>
                        \`;
          });
        } else {
          html += '<div class="health-backend">No backends configured</div>';
        }
        
        html += '</div></div>';
      } catch (error) {
        html += \`
          <div class="health-service">
            <h4>\${serviceName}</h4>
            <div class="health-error">Failed to check health: \${error.message}</div>
          </div>
        \`;
      }
    }
    
    html += '</div>';
    container.innerHTML = html;

  } catch (error) {
    console.error('Failed to load health data:', error);
    container.innerHTML = \`
      <div class="empty-state">
        <i class="fas fa-exclamation-triangle"></i>
        <h3>Failed to load health status</h3>
        <p>Error: \${error.message}</p>
        <button class="btn btn-primary" onclick="loadHealthData()">
          <i class="fas fa-sync-alt"></i> Retry
        </button>
      </div>
    \`;
  }
}

// Load logs data
async function loadLogsData() {
  const container = document.getElementById('logs-container');
  
  // For now, show a placeholder since we don't have a logs endpoint
  container.innerHTML = \`
        <div class="log-entry">
            <span class="log-time">[\${new Date().toISOString()}]</span>
      <span class="log-level log-info">INFO</span>
            <span class="log-message">Dashboard loaded successfully</span>
        </div>
        <div class="log-entry">
            <span class="log-time">[\${new Date().toISOString()}]</span>
      <span class="log-level log-info">INFO</span>
      <span class="log-message">Services monitoring active</span>
    </div>
    <div class="log-entry">
      <span class="log-time">[\${new Date().toISOString()}]</span>
      <span class="log-level log-warn">WARN</span>
      <span class="log-message">Real-time logs not yet implemented</span>
        </div>
    \`;
}

// Load recent activity
function loadRecentActivity() {
  const container = document.getElementById('activity-log');
  const now = new Date();

  container.innerHTML = \`
        <div class="activity-item">
            <div class="activity-time">\${now.toLocaleTimeString()}</div>
            <div class="activity-message">Dashboard refreshed</div>
        </div>
        <div class="activity-item">
            <div class="activity-time">\${new Date(now - 5 * 60000).toLocaleTimeString()}</div>
            <div class="activity-message">Health checks completed</div>
        </div>
        <div class="activity-item">
            <div class="activity-time">\${new Date(now - 10 * 60000).toLocaleTimeString()}</div>
            <div class="activity-message">Backend status updated</div>
        </div>
    \`;
}

// Refresh functions
function refreshServices() {
  loadServicesData();
}

function refreshBackends() {
  loadBackendsData();
}

async function runHealthCheck() {
  showSuccess('Running health checks...');
  loadHealthData();
}

function clearLogs() {
  const container = document.getElementById('logs-container');
  container.innerHTML = \`
    <div class="log-entry">
      <span class="log-time">[\${new Date().toISOString()}]</span>
      <span class="log-level log-info">INFO</span>
      <span class="log-message">Logs cleared</span>
    </div>
  \`;
}

// Show error message
function showError(message) {
  const alert = document.querySelector('.alert');
  alert.className = 'alert alert-error';
  alert.innerHTML = \`<i class="fas fa-exclamation-triangle"></i> \${message}\`;
  alert.style.display = 'flex';
  
  // Auto-hide after 5 seconds
  setTimeout(() => {
    alert.style.display = 'none';
  }, 5000);
}

// Show success message
function showSuccess(message) {
  const alert = document.querySelector('.alert');
  alert.className = 'alert alert-success';
  alert.innerHTML = \`<i class="fas fa-check-circle"></i> \${message}\`;
  alert.style.display = 'flex';
  
  // Auto-hide after 3 seconds
  setTimeout(() => {
    alert.style.display = 'none';
  }, 3000);
}

// Modal Management
function openAddServiceModal() {
  console.log('Opening add service modal');
  const modal = document.getElementById('add-service-modal');
  if (modal) {
    modal.classList.add('active');
    console.log('Modal opened successfully');
  } else {
    console.error('Could not find add-service-modal element');
  }
}

function closeAddServiceModal() {
  console.log('Closing add service modal');
  const modal = document.getElementById('add-service-modal');
  if (modal) {
    modal.classList.remove('active');
    // Clear form
    document.getElementById('service-hostname').value = '';
    document.getElementById('service-backends').value = '';
    document.getElementById('service-health-path').value = '/health';
    console.log('Modal closed successfully');
  } else {
    console.error('Could not find add-service-modal element');
  }
}

function openAddBackendModal() {
  // Populate service select
  populateServiceSelect();
  document.getElementById('add-backend-modal').classList.add('active');
}

function closeAddBackendModal() {
  document.getElementById('add-backend-modal').classList.remove('active');
  // Clear form
  document.getElementById('backend-service-select').value = '';
  document.getElementById('backend-url').value = '';
  document.getElementById('backend-weight').value = '1';
}

async function populateServiceSelect() {
  try {
    const services = await apiCall('/admin/services/list');
    const select = document.getElementById('backend-service-select');
    
    // Clear existing options except the first one
    select.innerHTML = '<option value="">Select a service...</option>';
    
    if (services.services) {
      Object.keys(services.services).forEach(serviceName => {
        const option = document.createElement('option');
        option.value = serviceName;
        option.textContent = serviceName;
        select.appendChild(option);
      });
    }
  } catch (error) {
    console.error('Failed to populate service select:', error);
  }
}

// Service Management
async function createService() {
  const hostname = document.getElementById('service-hostname').value.trim();
  const backendsText = document.getElementById('service-backends').value.trim();
  const healthPath = document.getElementById('service-health-path').value.trim();
  
  if (!hostname || !backendsText) {
    showError('Please fill in all required fields');
    return;
  }
  
  const backends = backendsText.split('\\n').map(url => url.trim()).filter(url => url);
  
  if (backends.length === 0) {
    showError('Please provide at least one backend URL');
    return;
  }
  
  try {
    // Create the service configuration
    const config = {
      serviceId: hostname,
      mode: 'simple',
      simpleBackends: backends,
      pools: [{
        id: "simple-pool",
        name: "Simple Failover Pool",
        backends: backends.map((url, index) => ({
          id: \`backend-\${index}\`,
          url: url,
          ip: new URL(url).hostname,
          weight: 1,
          healthy: true,
          consecutiveFailures: 0,
          requests: 0,
          successfulRequests: 0,
          failedRequests: 0,
          totalResponseTimeMs: 0,
          priority: 10,
          enabled: true
        })),
        enabled: true,
        minimum_origins: 1,
        endpoint_steering: 'round_robin'
      }],
      load_balancer: {
        id: "simple-lb",
        name: "Simple Load Balancer",
        hostname: hostname,
        default_pool_ids: ["simple-pool"],
        proxied: true,
        enabled: true,
        steering_policy: "off",
        session_affinity: {
          type: "none",
          enabled: false
        }
      },
      currentRoundRobinIndex: 0,
      passiveHealthChecks: { 
        max_failures: 3, 
        failure_timeout_ms: 30000, 
        retryable_status_codes: [500, 502, 503, 504], 
        enabled: true, 
        monitor_timeout: 10 
      },
      activeHealthChecks: { 
        enabled: false, 
        path: healthPath || "/health", 
        interval: 60, 
        timeout: 5, 
        type: 'http', 
        consecutive_up: 2, 
        consecutive_down: 3, 
        retries: 1 
      },
      retryPolicy: { 
        max_retries: 2, 
        retry_timeout: 10000, 
        backoff_strategy: 'constant', 
        base_delay: 1000 
      },
      hostHeaderRewrite: 'preserve',
      observability: { 
        responseHeaderName: "X-Backend-Used",
        add_backend_header: true 
      }
    };
    
    const response = await apiCall(\`/admin/services/\${hostname}/config\`, {
      method: 'POST',
      body: JSON.stringify(config)
    });
    
    if (response.success) {
      showSuccess(\`Service \${hostname} created successfully\`);
      closeAddServiceModal();
      loadServicesData();
    } else {
      showError(response.message || 'Failed to create service');
    }
  } catch (error) {
    console.error('Failed to create service:', error);
    showError('Failed to create service: ' + error.message);
  }
}

async function addBackend() {
  const serviceName = document.getElementById('backend-service-select').value;
  const backendUrl = document.getElementById('backend-url').value.trim();
  const weight = parseInt(document.getElementById('backend-weight').value) || 1;
  
  if (!serviceName || !backendUrl) {
    showError('Please fill in all required fields');
    return;
  }
  
  try {
    const backend = {
      url: backendUrl,
      weight: weight,
      healthy: true,
      enabled: true
    };
    
    const response = await apiCall(\`/admin/services/\${serviceName}/backends\`, {
      method: 'POST',
      body: JSON.stringify(backend)
    });
    
    if (response.success) {
      showSuccess(\`Backend added to \${serviceName} successfully\`);
      closeAddBackendModal();
      loadBackendsData();
    } else {
      showError(response.message || 'Failed to add backend');
    }
  } catch (error) {
    console.error('Failed to add backend:', error);
    showError('Failed to add backend: ' + error.message);
  }
}

async function deleteService(serviceName) {
  if (!confirm(\`Are you sure you want to delete service "\${serviceName}"?\`)) {
    return;
  }
  
  try {
    const response = await apiCall(\`/admin/services/\${serviceName}/config\`, {
      method: 'DELETE'
    });
    
    if (response.success) {
      showSuccess(\`Service \${serviceName} deleted successfully\`);
      loadServicesData();
    } else {
      showError(response.message || 'Failed to delete service');
    }
  } catch (error) {
    console.error('Failed to delete service:', error);
    showError('Failed to delete service: ' + error.message);
  }
}

async function deleteBackend(serviceName, backendId) {
  if (!confirm(\`Are you sure you want to delete backend "\${backendId}" from service "\${serviceName}"?\`)) {
    return;
  }
  
  try {
    const response = await apiCall(\`/admin/services/\${serviceName}/backends\`, {
      method: 'DELETE',
      body: JSON.stringify({ backendId: backendId })
    });
    
    if (response.success) {
      showSuccess(\`Backend \${backendId} deleted successfully\`);
      loadBackendsData();
    } else {
      showError(response.message || 'Failed to delete backend');
    }
  } catch (error) {
    console.error('Failed to delete backend:', error);
    showError('Failed to delete backend: ' + error.message);
  }
}

async function viewServiceDetails(serviceName) {
  try {
    const config = await apiCall(\`/admin/services/\${serviceName}/config\`);
    const health = await apiCall(\`/admin/services/\${serviceName}/health\`);
    
    let details = \`Service: \${serviceName}\\n\\n\`;
    details += \`Mode: \${config.mode || 'simple'}\\n\`;
    details += \`Pools: \${config.pools ? config.pools.length : 0}\\n\\n\`;
    
    if (config.pools) {
      config.pools.forEach((pool, index) => {
        details += \`Pool \${index + 1}: \${pool.name}\\n\`;
        details += \`Backends: \${pool.backends ? pool.backends.length : 0}\\n\`;
        if (pool.backends) {
          pool.backends.forEach(backend => {
            details += \`  - \${backend.url} (\${backend.healthy ? 'Healthy' : 'Unhealthy'})\\n\`;
          });
        }
        details += '\\n';
      });
    }
    
    alert(details);
  } catch (error) {
    showError('Failed to load service details: ' + error.message);
  }
}

// Initialize all configured services
async function initializeServices() {
  try {
    showSuccess('Initializing services...');
    
    const response = await fetch(\`\${API_BASE}/init-services\`, {
      method: 'POST',
      headers: {
        'Authorization': \`Bearer \${API_SECRET}\`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!response.ok) {
      throw new Error(\`HTTP \${response.status}: \${response.statusText}\`);
    }
    
    const result = await response.json();
    showSuccess('Services initialized successfully! Refreshing data...');
    
    // Refresh all data
    loadOverviewData();
    loadServicesData();
    loadBackendsData();
    
  } catch (error) {
    console.error('Failed to initialize services:', error);
    showError('Failed to initialize services: ' + error.message);
  }
}

// Close modals when clicking outside
document.addEventListener('click', function(event) {
  if (event.target.classList.contains('modal')) {
    event.target.classList.remove('active');
  }
});

// Initialize dashboard
document.addEventListener('DOMContentLoaded', function () {
  console.log('Dashboard initializing...');
  
  // Check if API_SECRET is available from template
  if (typeof API_SECRET !== 'undefined' && API_SECRET) {
    console.log('API_SECRET loaded from template:', API_SECRET.substring(0, 10) + '...');
  } else {
    console.error('API_SECRET not available from template');
  }
  
  console.log('API_BASE:', API_BASE);
  
  // Check if modals exist and are properly hidden
  const addServiceModal = document.getElementById('add-service-modal');
  const addBackendModal = document.getElementById('add-backend-modal');
  
  console.log('Add Service Modal:', addServiceModal ? 'Found' : 'Not found');
  console.log('Add Backend Modal:', addBackendModal ? 'Found' : 'Not found');
  
  if (addServiceModal) {
    console.log('Add Service Modal classes:', addServiceModal.className);
    console.log('Add Service Modal display:', window.getComputedStyle(addServiceModal).display);
  }
  
  if (addBackendModal) {
    console.log('Add Backend Modal classes:', addBackendModal.className);
    console.log('Add Backend Modal display:', window.getComputedStyle(addBackendModal).display);
  }
  
  // Set up tab click handlers
  const tabs = document.querySelectorAll('.tab');
  console.log(\`Found \${tabs.length} tabs to set up\`);
  
  tabs.forEach((tab, index) => {
    const tabName = tab.getAttribute('data-tab');
    console.log(\`Setting up tab \${index}: \${tabName}\`);
    
    tab.addEventListener('click', function(event) {
      event.preventDefault();
      console.log(\`Tab clicked: \${tabName}\`);
      showTab(tabName);
    });
  });

  // Load initial data
  loadOverviewData();

  // Set up auto-refresh every 30 seconds
  setInterval(() => {
    const activeTab = document.querySelector('.tab.active');
    if (activeTab) {
      const tabName = activeTab.getAttribute('data-tab');
      if (tabName) {
      loadTabData(tabName);
      }
    }
  }, 30000);
  
  console.log('Dashboard initialization complete');
}); 
\n
document.addEventListener('DOMContentLoaded', () => {
  const tabs = document.querySelectorAll('.tab');
  tabs.forEach(tab => {
    tab.addEventListener('click', () => {
      const tabName = tab.getAttribute('data-tab');
      showTab(tabName);
    });
  });
  showTab('overview');
});
    `,
        contentType: 'application/javascript'
    }
};

// Template storage
const templates: Record<string, string> = {
    'login': `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Load Balancer - Sign In</title>
    <link rel="stylesheet" href="/static/css/login.css">
</head>
<body>
    <div class="login-container">
        <div class="logo">🔄</div>
        <h1>Load Balancer Control Panel</h1>
        <p class="subtitle">Sign in to manage your load balancer configuration</p>
        
        {{ERROR_MESSAGE}}
        
        <a href="/auth/github" class="oauth-button github-button">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                <path d="M12 0C5.374 0 0 5.373 0 12 0 17.302 3.438 21.8 8.207 23.387c.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23A11.509 11.509 0 0112 5.803c1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576C20.566 21.797 24 17.3 24 12c0-6.627-5.373-12-12-12z"/>
            </svg>
            Continue with GitHub
        </a>
        
        <a href="/auth/google" class="oauth-button google-button">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
            </svg>
            Continue with Google
        </a>
        
        <div class="divider">
            <span>or</span>
        </div>
        
        <form class="basic-auth-form" method="post" action="/auth/basic">
            <div class="form-group">
                <label for="username">Username</label>
                <input type="text" id="username" name="username" required>
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" id="password" name="password" required>
            </div>
            <button type="submit" class="login-button">Sign In</button>
        </form>
        
        <p class="info">
            OAuth access is restricted to authorized email addresses.<br>
            Contact your administrator for access.
        </p>
    </div>
</body>
</html> `,
    'dashboard': `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Load Balancer Control Panel</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/static/css/dashboard.css">
</head>
<body>
    <div class="header">
        <h1><i class="fas fa-balance-scale"></i> Load Balancer Control Panel</h1>
        <div class="user-info">
            <div class="user-details">
                <div class="user-name">{{USER_NAME}}</div>
                <div class="user-email">{{USER_EMAIL}}</div>
            </div>
            <a href="/auth/logout" class="logout-btn">
                <i class="fas fa-sign-out-alt"></i> Logout
            </a>
        </div>
    </div>

    <div class="container">
        <div class="alert">
            <i class="fas fa-info-circle"></i>
            Welcome to the Load Balancer Control Panel. Manage your backend services and monitor their health.
            <button class="btn btn-primary" onclick="initializeServices()" style="margin-left: auto;">
                <i class="fas fa-sync-alt"></i> Initialize Services
            </button>
        </div>

        <div class="tabs">
            <button class="tab active" data-tab="overview">
                <i class="fas fa-tachometer-alt"></i> Overview
            </button>
            <button class="tab" data-tab="services">
                <i class="fas fa-server"></i> Services
            </button>
            <button class="tab" data-tab="backends">
                <i class="fas fa-network-wired"></i> Backends
            </button>
            <button class="tab" data-tab="health">
                <i class="fas fa-heartbeat"></i> Health Checks
            </button>
            <button class="tab" data-tab="logs">
                <i class="fas fa-file-alt"></i> Logs
            </button>
        </div>

        <!-- Overview Tab -->
        <div id="overview-tab" class="tab-content active">
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-icon">
                        <i class="fas fa-server"></i>
                    </div>
                    <div class="stat-content">
                        <div class="stat-number" id="total-services">-</div>
                        <div class="stat-label">Total Services</div>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon">
                        <i class="fas fa-network-wired"></i>
                    </div>
                    <div class="stat-content">
                        <div class="stat-number" id="total-backends">-</div>
                        <div class="stat-label">Total Backends</div>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon healthy">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <div class="stat-content">
                        <div class="stat-number" id="healthy-backends">-</div>
                        <div class="stat-label">Healthy Backends</div>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon error">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <div class="stat-content">
                        <div class="stat-number" id="unhealthy-backends">-</div>
                        <div class="stat-label">Unhealthy Backends</div>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <h3><i class="fas fa-chart-line"></i> Recent Activity</h3>
                </div>
                <div class="card-content">
                    <div id="activity-log">
                        <div class="activity-item">
                            <div class="activity-time">Loading...</div>
                            <div class="activity-message">Fetching recent activity...</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Services Tab -->
        <div id="services-tab" class="tab-content">
            <div class="card">
                <div class="card-header">
                    <h3><i class="fas fa-server"></i> Services</h3>
                    <div>
                    <button class="btn btn-primary" onclick="refreshServices()">
                        <i class="fas fa-sync-alt"></i> Refresh
                    </button>
                        <button class="btn btn-success" onclick="openAddServiceModal()">
                            <i class="fas fa-plus"></i> Add Service
                        </button>
                    </div>
                </div>
                <div class="card-content">
                    <div id="services-list">
                        <div class="loading">Loading services...</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Backends Tab -->
        <div id="backends-tab" class="tab-content">
            <div class="card">
                <div class="card-header">
                    <h3><i class="fas fa-network-wired"></i> Backend Servers</h3>
                    <div>
                    <button class="btn btn-primary" onclick="refreshBackends()">
                        <i class="fas fa-sync-alt"></i> Refresh
                    </button>
                        <button class="btn btn-success" onclick="openAddBackendModal()">
                            <i class="fas fa-plus"></i> Add Backend
                        </button>
                    </div>
                </div>
                <div class="card-content">
                    <div id="backends-list">
                        <div class="loading">Loading backends...</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Health Tab -->
        <div id="health-tab" class="tab-content">
            <div class="card">
                <div class="card-header">
                    <h3><i class="fas fa-heartbeat"></i> Health Checks</h3>
                    <button class="btn btn-primary" onclick="runHealthCheck()">
                        <i class="fas fa-play"></i> Run Health Check
                    </button>
                </div>
                <div class="card-content">
                    <div id="health-results">
                        <div class="loading">Loading health status...</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Logs Tab -->
        <div id="logs-tab" class="tab-content">
            <div class="card">
                <div class="card-header">
                    <h3><i class="fas fa-file-alt"></i> System Logs</h3>
                    <button class="btn btn-secondary" onclick="clearLogs()">
                        <i class="fas fa-trash"></i> Clear
                    </button>
                </div>
                <div class="card-content">
                    <div id="logs-container">
                        <div class="log-entry">
                            <span class="log-time">[Loading...]</span>
                            <span class="log-message">Fetching system logs...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Service Modal -->
    <div id="add-service-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Add New Service</h3>
                <button class="modal-close" onclick="closeAddServiceModal()">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>Service Hostname *</label>
                    <input type="text" id="service-hostname" placeholder="example.com" required>
                </div>
                <div class="form-group">
                    <label>Backend URLs (one per line) *</label>
                    <textarea id="service-backends" placeholder="https://backend1.example.com&#10;https://backend2.example.com" required></textarea>
                </div>
                <div class="form-group">
                    <label>Health Check Path</label>
                    <input type="text" id="service-health-path" placeholder="/health" value="/health">
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeAddServiceModal()">Cancel</button>
                <button class="btn btn-success" onclick="createService()">
                    <i class="fas fa-plus"></i> Create Service
                </button>
            </div>
        </div>
    </div>

    <!-- Add Backend Modal -->
    <div id="add-backend-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Add Backend to Service</h3>
                <button class="modal-close" onclick="closeAddBackendModal()">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>Select Service *</label>
                    <select id="backend-service-select" required>
                        <option value="">Select a service...</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Backend URL *</label>
                    <input type="url" id="backend-url" placeholder="https://backend.example.com" required>
                </div>
                <div class="form-group">
                    <label>Weight</label>
                    <input type="number" id="backend-weight" value="1" min="1" max="100">
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeAddBackendModal()">Cancel</button>
                <button class="btn btn-success" onclick="addBackend()">
                    <i class="fas fa-plus"></i> Add Backend
                </button>
            </div>
        </div>
    </div>

    <script>
        // API Configuration
        const API_SECRET = '{{API_SECRET}}';
        const API_BASE = window.location.origin;
    </script>
    <script src="/static/js/dashboard.js"></script>

    <script>
        const API_SECRET = '{{API_SECRET}}';
    </script>
    <script src="/static/js/dashboard.js"></script>
    \n</body>
</html> `
};

// Template placeholders
interface TemplateVariables {
    [key: string]: string;
}

// Serve static files
export function serveStaticFile(pathname: string): Response | null {
    const file = staticFiles[pathname];
    if (!file) {
        return null;
    }

    return new Response(file.content, {
        headers: {
            'Content-Type': file.contentType,
            'Cache-Control': 'public, max-age=3600',
            'Access-Control-Allow-Origin': '*'
        }
    });
}

// Template rendering function
function renderTemplate(template: string, variables: TemplateVariables): string {
    let rendered = template;
    for (const [key, value] of Object.entries(variables)) {
        const placeholder = `{{${key}}}`;
        rendered = rendered.replace(new RegExp(placeholder, 'g'), value);
    }
    return rendered;
}

// Generate login page using template
export function generateLoginPage(env: Env, error?: string): string {
    const template = templates['login'];
    const errorMessage = error ? `<div class="error">${error}</div>` : '';
    
    return renderTemplate(template, {
        ERROR_MESSAGE: errorMessage
    });
}

// Generate dashboard using template
export function generateWebInterface(user: OAuthUser, env: Env): string {
    const template = templates['dashboard'];
    
    return renderTemplate(template, {
        USER_NAME: user.name || 'Unknown User',
        USER_EMAIL: user.email || 'unknown@example.com',
        API_SECRET: env.API_SECRET || ''
    });
}
