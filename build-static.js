const fs = require('fs');
const path = require('path');

// Read file content and escape it for TypeScript
function readAndEscape(filePath) {
    try {
        const content = fs.readFileSync(filePath, 'utf8');
        // Escape backticks and ${} for template literals
        return content
            .replace(/\\/g, '\\\\')
            .replace(/`/g, '\\`')
            .replace(/\$\{/g, '\\${');
    } catch (error) {
        console.warn(`Warning: Could not read ${filePath}:`, error.message);
        return `/* Could not read ${filePath} */`;
    }
}

// Generate the static files module
function generateStaticFilesModule() {
    const staticDir = path.join(__dirname, 'static');
    
    // Read all static files
    const loginCSS = readAndEscape(path.join(staticDir, 'css', 'login.css'));
    const dashboardCSS = readAndEscape(path.join(staticDir, 'css', 'dashboard.css'));
    let dashboardJS = readAndEscape(path.join(staticDir, 'js', 'dashboard.js'));
    const loginHTML = readAndEscape(path.join(staticDir, 'templates', 'login.html'));
    let dashboardHTML = readAndEscape(path.join(staticDir, 'templates', 'dashboard.html'));

    // Append initialization logic to dashboard.js
    const initScript = `
document.addEventListener('DOMContentLoaded', () => {
  const tabs = document.querySelectorAll('.tab');
  tabs.forEach(tab => {
    tab.addEventListener('click', () => {
      const tabName = tab.getAttribute('data-tab');
      showTab(tabName);
    });
  });
  showTab('overview');
});
    `;
    dashboardJS += '\\n' + initScript.replace(/`/g, '\\`');

    // Inject the API secret and script tag into the dashboard HTML
    const injection = `
    <script>
        const API_SECRET = '{{API_SECRET}}';
    </script>
    <script src="/static/js/dashboard.js"></script>
    `;
    dashboardHTML = dashboardHTML.replace('</body>', `${injection.replace(/`/g, '\\`')}\\n</body>`);

    const moduleContent = `// Auto-generated static files module
// DO NOT EDIT - This file is generated by build-static.js

import { OAuthUser } from './auth';

// Static file content storage
const staticFiles: Record<string, { content: string; contentType: string }> = {
    '/static/css/login.css': {
        content: \`${loginCSS}\`,
        contentType: 'text/css'
    },
    '/static/css/dashboard.css': {
        content: \`${dashboardCSS}\`,
        contentType: 'text/css'
    },
    '/static/js/dashboard.js': {
        content: \`${dashboardJS}\`,
        contentType: 'application/javascript'
    }
};

// Template storage
const templates: Record<string, string> = {
    'login': \`${loginHTML}\`,
    'dashboard': \`${dashboardHTML}\`
};

// Template placeholders
interface TemplateVariables {
    [key: string]: string;
}

// Serve static files
export function serveStaticFile(pathname: string): Response | null {
    const file = staticFiles[pathname];
    if (!file) {
        return null;
    }

    return new Response(file.content, {
        headers: {
            'Content-Type': file.contentType,
            'Cache-Control': 'public, max-age=3600',
            'Access-Control-Allow-Origin': '*'
        }
    });
}

// Template rendering function
function renderTemplate(template: string, variables: TemplateVariables): string {
    let rendered = template;
    for (const [key, value] of Object.entries(variables)) {
        const placeholder = \`{{\${key}}}\`;
        rendered = rendered.replace(new RegExp(placeholder, 'g'), value);
    }
    return rendered;
}

// Generate login page using template
export function generateLoginPage(env: Env, error?: string): string {
    const template = templates['login'];
    const errorMessage = error ? \`<div class="error">\${error}</div>\` : '';
    
    return renderTemplate(template, {
        ERROR_MESSAGE: errorMessage
    });
}

// Generate dashboard using template
export function generateWebInterface(user: OAuthUser, env: Env): string {
    const template = templates['dashboard'];
    
    return renderTemplate(template, {
        USER_NAME: user.name || 'Unknown User',
        USER_EMAIL: user.email || 'unknown@example.com',
        API_SECRET: env.API_SECRET || ''
    });
}
`;

    // Write the generated module
    const outputPath = path.join(__dirname, 'src', 'static-files-generated.ts');
    fs.writeFileSync(outputPath, moduleContent);
    console.log('âœ… Generated static files module:', outputPath);
}

// Run the build
generateStaticFilesModule(); 